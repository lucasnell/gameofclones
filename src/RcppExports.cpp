// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "gameofclones_types.hpp"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// logit
NumericVector logit(NumericVector p);
RcppExport SEXP _gameofclones_logit(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(logit(p));
    return rcpp_result_gen;
END_RCPP
}
// inv_logit
NumericVector inv_logit(NumericVector a);
RcppExport SEXP _gameofclones_inv_logit(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_logit(a));
    return rcpp_result_gen;
END_RCPP
}
// leslie_matrix
NumericMatrix leslie_matrix(IntegerVector instar_days, const double& surv_juv, NumericVector surv_adult, NumericVector repro);
RcppExport SEXP _gameofclones_leslie_matrix(SEXP instar_daysSEXP, SEXP surv_juvSEXP, SEXP surv_adultSEXP, SEXP reproSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type instar_days(instar_daysSEXP);
    Rcpp::traits::input_parameter< const double& >::type surv_juv(surv_juvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type surv_adult(surv_adultSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type repro(reproSEXP);
    rcpp_result_gen = Rcpp::wrap(leslie_matrix(instar_days, surv_juv, surv_adult, repro));
    return rcpp_result_gen;
END_RCPP
}
// carrying_capacity
double carrying_capacity(const arma::mat& apterous, const arma::mat& alates, const double& alate_prop, const double& disp_prop, const double& disp_mort, const uint32& disp_start, const double& K);
RcppExport SEXP _gameofclones_carrying_capacity(SEXP apterousSEXP, SEXP alatesSEXP, SEXP alate_propSEXP, SEXP disp_propSEXP, SEXP disp_mortSEXP, SEXP disp_startSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type apterous(apterousSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alates(alatesSEXP);
    Rcpp::traits::input_parameter< const double& >::type alate_prop(alate_propSEXP);
    Rcpp::traits::input_parameter< const double& >::type disp_prop(disp_propSEXP);
    Rcpp::traits::input_parameter< const double& >::type disp_mort(disp_mortSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type disp_start(disp_startSEXP);
    Rcpp::traits::input_parameter< const double& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(carrying_capacity(apterous, alates, alate_prop, disp_prop, disp_mort, disp_start, K));
    return rcpp_result_gen;
END_RCPP
}
// sad_leslie
NumericVector sad_leslie(NumericMatrix leslie);
RcppExport SEXP _gameofclones_sad_leslie(SEXP leslieSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type leslie(leslieSEXP);
    rcpp_result_gen = Rcpp::wrap(sad_leslie(leslie));
    return rcpp_result_gen;
END_RCPP
}
// fields_to_list
List fields_to_list(SEXP all_fields_ptr);
RcppExport SEXP _gameofclones_fields_to_list(SEXP all_fields_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type all_fields_ptr(all_fields_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(fields_to_list(all_fields_ptr));
    return rcpp_result_gen;
END_RCPP
}
// fields_from_vectors
void fields_from_vectors(SEXP all_fields_ptr, std::vector<std::vector<double>>& N_vecs);
RcppExport SEXP _gameofclones_fields_from_vectors(SEXP all_fields_ptrSEXP, SEXP N_vecsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type all_fields_ptr(all_fields_ptrSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>>& >::type N_vecs(N_vecsSEXP);
    fields_from_vectors(all_fields_ptr, N_vecs);
    return R_NilValue;
END_RCPP
}
// using_openmp
bool using_openmp();
RcppExport SEXP _gameofclones_using_openmp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(using_openmp());
    return rcpp_result_gen;
END_RCPP
}
// sim_gameofclones_cpp
List sim_gameofclones_cpp(const uint32& n_reps, const uint32& n_fields, const uint32& max_plant_age, const double& max_N, const std::deque<uint32>& check_for_clear, const double& clear_surv, const uint32& max_t, const uint32& save_every, const double& mean_K, const double& sd_K, const std::vector<double>& K_y_mult, const double& wilted_prop, const double& shape1_wilted_mort, const double& shape2_wilted_mort, const arma::mat& attack_surv, const bool& disp_error, const bool& demog_error, const double& sigma_x, const double& sigma_y, const double& rho, const double& extinct_N, const std::vector<std::string>& aphid_name, const std::vector<arma::cube>& leslie_mat, const std::vector<arma::cube>& aphid_density_0, const std::vector<double>& alate_b0, const std::vector<double>& alate_b1, const double& alate_field_disp_p, const std::vector<double>& alate_plant_disp_p, const std::vector<double>& disp_mort, const std::vector<uint32>& disp_start, const std::vector<uint32>& living_days, const std::vector<double>& pred_rate, const arma::mat& mum_density_0, const double& mum_smooth, const double& max_mum_density, const arma::vec& rel_attack, const double& a, const double& k, const double& h, const std::vector<double>& wasp_density_0, const std::vector<uint32>& wasp_delay, const double& wasp_disp_m0, const double& wasp_disp_m1, const std::vector<double>& wasp_field_attract, const double& sex_ratio, const std::vector<double>& s_y, const std::vector<bool>& constant_wasps, const std::vector<uint32>& perturb_when, const std::vector<uint32>& perturb_where, const std::vector<uint32>& perturb_who, const std::vector<double>& perturb_how, uint32 n_threads, const bool& show_progress);
RcppExport SEXP _gameofclones_sim_gameofclones_cpp(SEXP n_repsSEXP, SEXP n_fieldsSEXP, SEXP max_plant_ageSEXP, SEXP max_NSEXP, SEXP check_for_clearSEXP, SEXP clear_survSEXP, SEXP max_tSEXP, SEXP save_everySEXP, SEXP mean_KSEXP, SEXP sd_KSEXP, SEXP K_y_multSEXP, SEXP wilted_propSEXP, SEXP shape1_wilted_mortSEXP, SEXP shape2_wilted_mortSEXP, SEXP attack_survSEXP, SEXP disp_errorSEXP, SEXP demog_errorSEXP, SEXP sigma_xSEXP, SEXP sigma_ySEXP, SEXP rhoSEXP, SEXP extinct_NSEXP, SEXP aphid_nameSEXP, SEXP leslie_matSEXP, SEXP aphid_density_0SEXP, SEXP alate_b0SEXP, SEXP alate_b1SEXP, SEXP alate_field_disp_pSEXP, SEXP alate_plant_disp_pSEXP, SEXP disp_mortSEXP, SEXP disp_startSEXP, SEXP living_daysSEXP, SEXP pred_rateSEXP, SEXP mum_density_0SEXP, SEXP mum_smoothSEXP, SEXP max_mum_densitySEXP, SEXP rel_attackSEXP, SEXP aSEXP, SEXP kSEXP, SEXP hSEXP, SEXP wasp_density_0SEXP, SEXP wasp_delaySEXP, SEXP wasp_disp_m0SEXP, SEXP wasp_disp_m1SEXP, SEXP wasp_field_attractSEXP, SEXP sex_ratioSEXP, SEXP s_ySEXP, SEXP constant_waspsSEXP, SEXP perturb_whenSEXP, SEXP perturb_whereSEXP, SEXP perturb_whoSEXP, SEXP perturb_howSEXP, SEXP n_threadsSEXP, SEXP show_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint32& >::type n_reps(n_repsSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type n_fields(n_fieldsSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type max_plant_age(max_plant_ageSEXP);
    Rcpp::traits::input_parameter< const double& >::type max_N(max_NSEXP);
    Rcpp::traits::input_parameter< const std::deque<uint32>& >::type check_for_clear(check_for_clearSEXP);
    Rcpp::traits::input_parameter< const double& >::type clear_surv(clear_survSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type max_t(max_tSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type save_every(save_everySEXP);
    Rcpp::traits::input_parameter< const double& >::type mean_K(mean_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd_K(sd_KSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type K_y_mult(K_y_multSEXP);
    Rcpp::traits::input_parameter< const double& >::type wilted_prop(wilted_propSEXP);
    Rcpp::traits::input_parameter< const double& >::type shape1_wilted_mort(shape1_wilted_mortSEXP);
    Rcpp::traits::input_parameter< const double& >::type shape2_wilted_mort(shape2_wilted_mortSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type attack_surv(attack_survSEXP);
    Rcpp::traits::input_parameter< const bool& >::type disp_error(disp_errorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type demog_error(demog_errorSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_x(sigma_xSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_y(sigma_ySEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type extinct_N(extinct_NSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type aphid_name(aphid_nameSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::cube>& >::type leslie_mat(leslie_matSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::cube>& >::type aphid_density_0(aphid_density_0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alate_b0(alate_b0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alate_b1(alate_b1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alate_field_disp_p(alate_field_disp_pSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alate_plant_disp_p(alate_plant_disp_pSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type disp_mort(disp_mortSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type disp_start(disp_startSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type living_days(living_daysSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type pred_rate(pred_rateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mum_density_0(mum_density_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type mum_smooth(mum_smoothSEXP);
    Rcpp::traits::input_parameter< const double& >::type max_mum_density(max_mum_densitySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type rel_attack(rel_attackSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type wasp_density_0(wasp_density_0SEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type wasp_delay(wasp_delaySEXP);
    Rcpp::traits::input_parameter< const double& >::type wasp_disp_m0(wasp_disp_m0SEXP);
    Rcpp::traits::input_parameter< const double& >::type wasp_disp_m1(wasp_disp_m1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type wasp_field_attract(wasp_field_attractSEXP);
    Rcpp::traits::input_parameter< const double& >::type sex_ratio(sex_ratioSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type s_y(s_ySEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type constant_wasps(constant_waspsSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type perturb_when(perturb_whenSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type perturb_where(perturb_whereSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type perturb_who(perturb_whoSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type perturb_how(perturb_howSEXP);
    Rcpp::traits::input_parameter< uint32 >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show_progress(show_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_gameofclones_cpp(n_reps, n_fields, max_plant_age, max_N, check_for_clear, clear_surv, max_t, save_every, mean_K, sd_K, K_y_mult, wilted_prop, shape1_wilted_mort, shape2_wilted_mort, attack_surv, disp_error, demog_error, sigma_x, sigma_y, rho, extinct_N, aphid_name, leslie_mat, aphid_density_0, alate_b0, alate_b1, alate_field_disp_p, alate_plant_disp_p, disp_mort, disp_start, living_days, pred_rate, mum_density_0, mum_smooth, max_mum_density, rel_attack, a, k, h, wasp_density_0, wasp_delay, wasp_disp_m0, wasp_disp_m1, wasp_field_attract, sex_ratio, s_y, constant_wasps, perturb_when, perturb_where, perturb_who, perturb_how, n_threads, show_progress));
    return rcpp_result_gen;
END_RCPP
}
// restart_fill_other_pars
SEXP restart_fill_other_pars(SEXP all_fields_in_ptr, const double& K, const std::vector<double>& alate_b0, const std::vector<double>& alate_b1, const double& alate_field_disp_p, const std::vector<double>& K_y_mult, const std::vector<double>& s_y, const double& a, const double& k, const double& h, const double& wasp_disp_m0, const double& wasp_disp_m1, const std::vector<double>& wasp_field_attract, const double& mum_smooth, const std::vector<double>& pred_rate, const uint32& max_plant_age, const double& clear_surv);
RcppExport SEXP _gameofclones_restart_fill_other_pars(SEXP all_fields_in_ptrSEXP, SEXP KSEXP, SEXP alate_b0SEXP, SEXP alate_b1SEXP, SEXP alate_field_disp_pSEXP, SEXP K_y_multSEXP, SEXP s_ySEXP, SEXP aSEXP, SEXP kSEXP, SEXP hSEXP, SEXP wasp_disp_m0SEXP, SEXP wasp_disp_m1SEXP, SEXP wasp_field_attractSEXP, SEXP mum_smoothSEXP, SEXP pred_rateSEXP, SEXP max_plant_ageSEXP, SEXP clear_survSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type all_fields_in_ptr(all_fields_in_ptrSEXP);
    Rcpp::traits::input_parameter< const double& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alate_b0(alate_b0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alate_b1(alate_b1SEXP);
    Rcpp::traits::input_parameter< const double& >::type alate_field_disp_p(alate_field_disp_pSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type K_y_mult(K_y_multSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type s_y(s_ySEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const double& >::type wasp_disp_m0(wasp_disp_m0SEXP);
    Rcpp::traits::input_parameter< const double& >::type wasp_disp_m1(wasp_disp_m1SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type wasp_field_attract(wasp_field_attractSEXP);
    Rcpp::traits::input_parameter< const double& >::type mum_smooth(mum_smoothSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type pred_rate(pred_rateSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type max_plant_age(max_plant_ageSEXP);
    Rcpp::traits::input_parameter< const double& >::type clear_surv(clear_survSEXP);
    rcpp_result_gen = Rcpp::wrap(restart_fill_other_pars(all_fields_in_ptr, K, alate_b0, alate_b1, alate_field_disp_p, K_y_mult, s_y, a, k, h, wasp_disp_m0, wasp_disp_m1, wasp_field_attract, mum_smooth, pred_rate, max_plant_age, clear_surv));
    return rcpp_result_gen;
END_RCPP
}
// restart_experiments_cpp
List restart_experiments_cpp(SEXP all_fields_ptr, const uint32& max_t, const uint32& save_every, const std::deque<uint32>& check_for_clear, const bool& stage_ts_out, const bool& show_progress, const std::vector<uint32>& perturb_when, const std::vector<uint32>& perturb_where, const std::vector<uint32>& perturb_who, const std::vector<double>& perturb_how);
RcppExport SEXP _gameofclones_restart_experiments_cpp(SEXP all_fields_ptrSEXP, SEXP max_tSEXP, SEXP save_everySEXP, SEXP check_for_clearSEXP, SEXP stage_ts_outSEXP, SEXP show_progressSEXP, SEXP perturb_whenSEXP, SEXP perturb_whereSEXP, SEXP perturb_whoSEXP, SEXP perturb_howSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type all_fields_ptr(all_fields_ptrSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type max_t(max_tSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type save_every(save_everySEXP);
    Rcpp::traits::input_parameter< const std::deque<uint32>& >::type check_for_clear(check_for_clearSEXP);
    Rcpp::traits::input_parameter< const bool& >::type stage_ts_out(stage_ts_outSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type perturb_when(perturb_whenSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type perturb_where(perturb_whereSEXP);
    Rcpp::traits::input_parameter< const std::vector<uint32>& >::type perturb_who(perturb_whoSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type perturb_how(perturb_howSEXP);
    rcpp_result_gen = Rcpp::wrap(restart_experiments_cpp(all_fields_ptr, max_t, save_every, check_for_clear, stage_ts_out, show_progress, perturb_when, perturb_where, perturb_who, perturb_how));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gameofclones_logit", (DL_FUNC) &_gameofclones_logit, 1},
    {"_gameofclones_inv_logit", (DL_FUNC) &_gameofclones_inv_logit, 1},
    {"_gameofclones_leslie_matrix", (DL_FUNC) &_gameofclones_leslie_matrix, 4},
    {"_gameofclones_carrying_capacity", (DL_FUNC) &_gameofclones_carrying_capacity, 7},
    {"_gameofclones_sad_leslie", (DL_FUNC) &_gameofclones_sad_leslie, 1},
    {"_gameofclones_fields_to_list", (DL_FUNC) &_gameofclones_fields_to_list, 1},
    {"_gameofclones_fields_from_vectors", (DL_FUNC) &_gameofclones_fields_from_vectors, 2},
    {"_gameofclones_using_openmp", (DL_FUNC) &_gameofclones_using_openmp, 0},
    {"_gameofclones_sim_gameofclones_cpp", (DL_FUNC) &_gameofclones_sim_gameofclones_cpp, 53},
    {"_gameofclones_restart_fill_other_pars", (DL_FUNC) &_gameofclones_restart_fill_other_pars, 17},
    {"_gameofclones_restart_experiments_cpp", (DL_FUNC) &_gameofclones_restart_experiments_cpp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_gameofclones(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
